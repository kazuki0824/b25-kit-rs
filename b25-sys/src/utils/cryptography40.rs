const LOOKUP_TABLE: [u8; 256] = [
    0xAA, 0xA2, 0x10, 0xFA, 0xA9, 0xF0, 0x40, 0x2F, 0xB1, 0x1C, 0x1A, 0x6F, 0x43, 0xB4, 0x73, 0xBC,
    0x69, 0x77, 0xC5, 0x00, 0xF3, 0xD4, 0x09, 0x7E, 0x58, 0x8D, 0x44, 0xC3, 0xF5, 0x54, 0x0C, 0xDD,
    0x3F, 0xB7, 0xD1, 0xD6, 0x9A, 0xD3, 0x39, 0x82, 0x01, 0x5E, 0x03, 0xED, 0x78, 0x63, 0x90, 0x49,
    0x9B, 0x15, 0xA8, 0x4F, 0x67, 0x52, 0xAC, 0xE4, 0x37, 0xEA, 0xF7, 0x23, 0x55, 0x0F, 0x42, 0x12,
    0xE3, 0x05, 0x5F, 0x2D, 0x2E, 0x7F, 0x11, 0x38, 0x07, 0xF4, 0x3C, 0xE2, 0xD5, 0x9F, 0xDF, 0xCF,
    0x30, 0x0B, 0xAD, 0x66, 0x22, 0x70, 0xEF, 0x7B, 0xA6, 0x24, 0x65, 0x0D, 0x5D, 0x79, 0x02, 0x4D,
    0x0E, 0x32, 0x84, 0x97, 0xB8, 0x57, 0x34, 0xE8, 0x41, 0x87, 0xC1, 0xF9, 0x9C, 0x56, 0xAE, 0x71,
    0xAB, 0xBF, 0xD0, 0x88, 0x25, 0xC8, 0x1F, 0xD7, 0xFE, 0x04, 0x4E, 0xCE, 0x51, 0x81, 0xBB, 0xCD,
    0x91, 0xA5, 0x14, 0x75, 0xA4, 0x60, 0x61, 0x6E, 0x7A, 0xE6, 0x99, 0xD8, 0xA0, 0x4C, 0xDC, 0x1B,
    0x06, 0x6C, 0x3E, 0x9E, 0xF8, 0xCB, 0x98, 0x92, 0x0A, 0xFB, 0x2A, 0xCA, 0x50, 0x7C, 0xC0, 0x83,
    0x94, 0xB5, 0x6A, 0x21, 0x95, 0xB3, 0x48, 0xD9, 0x16, 0xA7, 0xEE, 0x4B, 0xFD, 0x9D, 0xBD, 0x6B,
    0xC6, 0x80, 0x20, 0x3A, 0x53, 0x1E, 0x5C, 0xC7, 0xB6, 0x08, 0xAF, 0xA1, 0x2B, 0x19, 0x26, 0x8A,
    0x47, 0xE1, 0x86, 0x74, 0xE9, 0x59, 0x62, 0x8B, 0x28, 0x6D, 0xEC, 0x76, 0xB0, 0x45, 0xC2, 0x46,
    0x4A, 0xE0, 0xF2, 0x8C, 0xBE, 0x3B, 0x5B, 0xBA, 0x31, 0x96, 0xE5, 0x36, 0x8E, 0xEB, 0xE7, 0xB9,
    0xA3, 0x35, 0x17, 0x68, 0x27, 0x8F, 0x85, 0x89, 0x29, 0x93, 0xFF, 0xFC, 0xDE, 0x7D, 0x18, 0xDB,
    0x64, 0xF6, 0x1D, 0xB2, 0x3D, 0xF1, 0xC9, 0x13, 0xDA, 0xCC, 0xC4, 0x72, 0x33, 0x5A, 0xD2, 0x2C,
];
fn select_sbox(x: u32) -> u32 {
    let x = x as usize;
    let v1 = LOOKUP_TABLE[0xff & (x >> 24)] as u32;
    let v2 = LOOKUP_TABLE[0xff & (x >> 16)] as u32;
    let v3 = LOOKUP_TABLE[0xff & (x >> 8)] as u32;
    let v4 = LOOKUP_TABLE[0xff & (x)] as u32;

    v1 << 24 | v2 << 16 | v3 << 8 | v4
}

pub fn key_schedule40(key: u64) -> [u32; 16] {
    // key ~ 01234567; left ~ 6420; right ~ 7531;
    let key = (key & 0x00ffff0000ffff00)
        | (key & 0xff000000ff000000) >> 24
        | (key & 0x000000ff000000ff) << 24;
    let key = (key & 0x0000ffffffff0000)
        | (key & 0xffff000000000000) >> 48
        | (key & 0x000000000000ffff) << 48;

    let mut left: u32 = (key >> 32) as u32;
    let mut right: u32 = (key & 0xffffffff) as u32;

    let mut extended_key: [u32; 16] = [0; 16];
    for item in &mut extended_key {
        let s: u32 = select_sbox(right);
        let s = 0x00ffff00 & (s ^ left) | (0xff0000ff & ((s & 0xff0000ff) + (left & 0xff0000ff)));
        left = right;
        right = (s >> 8) | (s << 24);
        *item = s;
    }
    extended_key
}

fn round_function_40(x: u32, key: u32) -> u32 {
    let mut x = select_sbox(x ^ key);
    x ^= ((x & 0x007f007f) << 9) | ((x & 0x00800080) << 1);
    x ^= ((x & 0x7f007f00) >> 7) | ((x & 0x80008000) >> 15);
    x = (x << 8) | (x >> 24);
    x ^= ((x & 0x3f003f00) >> 6) | ((x & 0xc000c000) >> 14);
    x ^= ((x & 0x003f003f) << 10) | ((x & 0x00c000c0) << 2);
    x = (x >> 8) | (x << 24);
    x
}

pub fn crypto_block_40(cipher: u64, extended_key: [u32; 16], encrypt: bool, protocol: u8) -> u64 {
    let salt = if (protocol & 0x0c) != 0 {
        0xfbe852461acd3970u64
    } else {
        0xd34c027be8579632u64
    };

    let (mut left, mut right) = {
        let salted = salt + cipher;
        let left: u32 = (salted >> 32) as u32;
        let right = salted as u32;
        (left, right)
    };

    if encrypt {
        let mut r = 0;
        loop {
            left ^= round_function_40(right, extended_key[r]);
            r += 1;
            right ^= round_function_40(left, extended_key[r]);
            if r == 15 {
                break;
            };
            r += 1;
        }
    } else {
        let mut r = 15;
        loop {
            left ^= round_function_40(right, extended_key[r]);
            r -= 1;
            right ^= round_function_40(left, extended_key[r]);
            if r == 0 {
                break;
            };
            r -= 1;
        }
    }

    let processed = ((right as u64) << 32) | (left as u64);
    processed - salt
}
